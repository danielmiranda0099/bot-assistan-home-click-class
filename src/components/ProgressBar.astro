---
interface Props {
  current: number;
  total: number;
}

const { current, total } = Astro.props;
---

<div id="progress-bar" class="progress-bar">
  <div class="navigation-container">
    <button id="back-button" class="nav-button nav-back" type="button" disabled>
      ← Back
    </button>

    <div class="progress-info">
      <div class="progress-text">
        Question {current} of {total}
      </div>
      <div class="progress-container">
        <div
          class="progress-fill"
          style={`width: ${total > 0 ? (current / total) * 100 : 0}%`}
        >
        </div>
      </div>
    </div>

    <button id="next-button" class="nav-button nav-next" type="button" disabled>
      Next →
    </button>
  </div>
</div>

<style>
  .progress-bar {
    margin-bottom: var(--spacing-md);
  }

  .navigation-container {
    display: flex;
    align-items: center;
    gap: var(--spacing-md);
    justify-content: space-between;
  }

  .nav-button {
    padding: var(--spacing-sm) var(--spacing-md);
    border: 1px solid #ccc;
    border-radius: var(--border-radius);
    background-color: var(--primary-color);
    color: white;
    font-size: var(--font-size-base);
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    min-width: 80px;
  }

  .nav-button:hover:not(:disabled) {
    border-color: var(--primary-color);
  }

  .nav-button:disabled {
    opacity: 0.4;
    cursor: not-allowed;
    color: #999;
  }

  .progress-info {
    flex: 1;
    max-width: 400px;
  }

  .progress-text {
    font-size: var(--font-size-base);
    font-weight: bold;
    margin-bottom: var(--spacing-sm);
    text-align: center;
  }

  .progress-container {
    width: 100%;
    height: 10px;
    background-color: #e0e0e0;
    border-radius: var(--border-radius);
    overflow: hidden;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #3b82f6, #10b981);
    border-radius: 3px;
    width: 20%;
    transition: width 0.3s ease;
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const backButton = document.getElementById(
      "back-button"
    ) as HTMLButtonElement;
    const nextButton = document.getElementById(
      "next-button"
    ) as HTMLButtonElement;

    if (backButton) {
      backButton.addEventListener("click", handleBackClick);
    }

    if (nextButton) {
      nextButton.addEventListener("click", handleNextClick);
    }
  });

  function handleBackClick() {
    console.log("Back button clicked");
    // Disparar evento personalizado que BotLesson escuchará
    const event = new CustomEvent("navigation-back", {
      bubbles: true,
      detail: { direction: "back" },
    });
    document.dispatchEvent(event);
  }

  function handleNextClick() {
    console.log("Next button clicked");
    // Disparar evento personalizado que BotLesson escuchará
    const event = new CustomEvent("navigation-next", {
      bubbles: true,
      detail: { direction: "next" },
    });
    document.dispatchEvent(event);
  }

  // Función para actualizar estado de botones desde fuera
  // (será llamada por BotLesson.astro)
  function updateNavigationButtons(canGoBack: boolean, canGoNext: boolean) {
    const backButton = document.getElementById(
      "back-button"
    ) as HTMLButtonElement;
    const nextButton = document.getElementById(
      "next-button"
    ) as HTMLButtonElement;

    if (backButton) {
      backButton.disabled = !canGoBack;
      console.log(`Back button ${canGoBack ? "enabled" : "disabled"}`);
    }

    if (nextButton) {
      nextButton.disabled = !canGoNext;
      console.log(`Next button ${canGoNext ? "enabled" : "disabled"}`);
    }
  }

  // Exportar función al window para que BotLesson pueda llamarla
  (window as any).updateNavigationButtons = updateNavigationButtons;
</script>
